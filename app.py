# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jQiV39sdy4BXyoFowiKquME7mnqchnA8
"""
import streamlit as st
import pandas as pd
import numpy as np
import joblib
from scipy.optimize import nnls

# Load pretrained components
regressor = joblib.load("voting_regressor.pkl")
preprocessor = joblib.load("preprocessor.pkl")
mlb_menu = joblib.load("mlb_menu.pkl")
mlb_event = joblib.load("mlb_event.pkl")
nmf = joblib.load("nmf_model.pkl")
menu_avg_leftovers = joblib.load("menu_avg_leftovers.pkl")
data = pd.read_excel("current_processed_menu_data.xlsx")

# 메뉴와 이벤트 전처리
data["Menu"] = data["Menu"].astype(str).apply(lambda x: sorted([i.strip() for i in x.split(",")]))
data["Event"] = data["Event"].astype(str).apply(lambda x: sorted([i.strip() for i in x.split(",")]))

# Label maps
MEAL_TYPE_MAP = {"아침": "A", "점심": "B", "저녁": "C", "브런치": "D"}
DESSERT_MAP = {"없음": "0", "유제품": "1", "과일": "2", "과일푸딩": "3", "이온음료/ 에이드/ 탄산": "4", "핫바": "5", "마카롱/ 초콜릿/ 에너지바": "6"}
EVENT_MAP = {"주말, 공휴일": "1", "주중": "0", "유격": "4", "중대 전술훈련 및 기본 훈련": "3"}

def predict(meal_type, menu_items, dessert, event):
    menu_list = [item.strip() for item in menu_items.split(",")]
    avg_leftover = np.mean([menu_avg_leftovers.get(item, 0) for item in menu_list])

    menu_encoded = pd.DataFrame(mlb_menu.transform([menu_list]), columns=mlb_menu.classes_)
    event_encoded = pd.DataFrame(mlb_event.transform([[event]]), columns=mlb_event.classes_)
    input_df = pd.DataFrame({
        'Meal Type': [meal_type],
        'Dessert': [dessert],
        'Menu Avg Leftovers': [avg_leftover]
    })
    full_input = pd.concat([input_df, menu_encoded, event_encoded], axis=1)
    X_input = preprocessor.transform(full_input)

    total_pred = np.expm1(regressor.predict(X_input)[0])

    # NNLS 분배
    H = nmf.components_
    menu_vec = menu_encoded.values[0]
    active_idx = np.where(menu_vec > 0)[0]
    H_active = H[:, active_idx]
    A = H_active.T @ H_active + 1e-6 * np.eye(len(active_idx))
    b = H_active.T @ np.ones(H_active.shape[0]) * total_pred
    weights, _ = nnls(A, b)
    weights = weights / (weights.sum() + 1e-10) * total_pred
    result = {mlb_menu.classes_[i]: round(weights[j], 2) for j, i in enumerate(active_idx)}

    return total_pred, result

# Streamlit UI
st.title("🍛 군 급식 잔반 예측 프로그램")
meal_type_k = st.selectbox("🍽️ 식사 종류", list(MEAL_TYPE_MAP.keys()))
dessert_k = st.selectbox("🍰 디저트", list(DESSERT_MAP.keys()))
event_k = st.selectbox("🎯 행사 종류", list(EVENT_MAP.keys()))
menu_input = st.text_area("🍲 메뉴 입력 (쉼표로 구분)", "영양밥,콩나물국,비엔나소시지야채볶음,돼지고기감자조림")
people_input = st.number_input("👥 식사 인원 수", min_value=1, step=1)

if st.button("🧮 예측하기"):
    total, indiv = predict(
        MEAL_TYPE_MAP[meal_type_k],
        menu_input,
        DESSERT_MAP[dessert_k],
        EVENT_MAP[event_k]
    )
    st.subheader(f"예상 전체 잔반량: {total:.1f}인분")
    if people_input > 0:
        per_person = total / people_input
        st.write(f"🙍 1인당 잔반량: {per_person:.2f}인분")

    st.write("### 🧾 개별 음식 잔반 예측")
    st.json(indiv)
